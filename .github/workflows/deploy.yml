name: Build and Publish

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-build-publish:
    name: Run unit tests, create build and publish to PyPI
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.6

      - name: Install TA-lib
        run: |
          sudo apt-get -y install gcc build-essential
          wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz \
            && sudo tar -xzf ta-lib-0.4.0-src.tar.gz \
            && sudo rm ta-lib-0.4.0-src.tar.gz \
            && cd ta-lib/ \
            && sudo ./configure --prefix=/usr \
            && sudo make \
            && sudo make install \
            && cd ~ \
            && sudo rm -rf ta-lib/ \
            && pip install ta-lib

      - name: Install dependencies
        run: |
          poetry install
          pip install coverage

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --ignore=E203,E501,F401,F403 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with unittest and compute coverage
        run: |
          coverage run --source=futon -m unittest discover && coverage report -m && coverage xml

      - name: Upload coverage to CodeCov
        uses: codecov/codecov-action@v1
        with:
          files: coverage.xml

      - name: Build package
        run: poetry build

      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: agrawal-rohit
          password: ${{ secrets.TEST_PYPI_SECRET }}
